// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "ctrl+'",
    "command": "workbench.action.terminal.new"
  },
  {
    "key": "ctrl+f8",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "docker attach $(docker ps | grep yuri-yuri | head -n1 | awk '{print $1;}')"
    }
  },
  {
    "key": "ctrl+alt+z",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+k z",
    "command": "-workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+shift+e",
    "command": "cursorLineEndSelect"
  },
  {
    "key": "ctrl+f1",
    "command": "-workbench.action.showErrorsWarnings",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+f1",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+f2",
    "command": "-editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+f2",
    "command": "-workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "key": "ctrl+f2",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+f6",
    "command": "-editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+tab",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+tab",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "alt+tab",
    "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "ctrl+l ctrl+m",
    "command": "-editor.action.toggleTabFocusMode",
    "when": "textInputFocus && editorLangId =~ /^latex$|^latex-expl3$|^doctex$|^rsweave$|^jlweave$|^pweave$/"
  },
  // {
  //   "key": "ctrl+shift+f",
  //   "command": "workbench.action.quickTextSearch"
  // },
  {
    "key": "ctrl+l",
    "command": "workbench.debug.panel.action.clearReplAction"
  },
  {
    "key": "ctrl+/",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.init",
    "args": "<C-/>"
  },
  {
    "key": "ctrl+.",
    "command": "-editor.toggleFold",
    "when": "editorFocus && foldingEnabled"
  },
  {
    "key": "ctrl+enter",
    "command": "calva.evaluateCurrentTopLevelForm"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+f4",
    "command": "-workbench.action.closeActiveEditor"
  },
  /**************************************************
        calva:
    **************************************************/
  {
    "key": "alt+t t",
    "command": "calva.runCustomREPLCommand",
    "when": "calva:connected && editorLangId == 'clojure'",
    "args": "t"
  },
  {
    "key": "alt+t ctrl+shift",
    "command": "calva.runCustomREPLCommand",
    "when": "calva:connected && editorLangId == 'clojure'",
    "args": "t-"
  },
  /**************************************************
      calva: repl
  **************************************************/
  {
    "key": "alt+r r",
    "command": "calva.jackIn",
    "when": "calva:keybindingsEnabled && workspaceFolderCount > 0"
  },
  {
    "key": "alt+r s",
    "command": "calva.disconnect"
  },
  {
    "key": "alt+r q",
    "command": "runCommands",
    "args": {
      "commands": [
        "calva.showOutputWindow",
        "workbench.action.closeEditorsAndGroup"
      ]
    },
    "when": "calva:connected && calva:keybindingsEnabled"
  },
  {
    "key": "alt+r o",
    "command": "runCommands",
    "args": {
      "commands": [
        "calva.showOutputWindow",
        "workbench.action.lockEditorGroup"
      ]
    },
    "when": "calva:connected && calva:keybindingsEnabled"
  },
  {
    "key": "alt+r backspace",
    "command": "runCommands",
    "args": {
      "commands": [
        "calva.showOutputWindow",
        "workbench.action.focusLastEditorGroup",
        "editor.action.selectAll",
        "editor.action.deleteLines"
      ]
    },
    "when": "calva:connected && calva:keybindingsEnabled"
  },
  {
    "key": "alt+r z",
    "command": "calva.runCustomREPLCommand",
    "when": "calva:connected && editorLangId == 'clojure'",
    "args": "ns-"
  },
  {
    "key": "alt+r x",
    "command": "calva.runCustomREPLCommand",
    "when": "calva:connected && editorLangId == 'clojure'",
    "args": "x"
  },
  {
    "key": "alt+r ctrl+shift",
    "command": "calva.runCustomREPLCommand",
    "when": "calva:connected && editorLangId == 'clojure'",
    "args": "x+"
  },
  {
    "key": "alt+r l",
    "command": "calva.loadFile",
    "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'"
  },
  {
    "key": "alt+r c",
    "command": "calva.interruptAllEvaluations",
    "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
  },
  {
    "key": "alt+cmd+enter",
    "command": "calva.evaluateToCursor",
    "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
  },
  {
    "key": "alt+r f",
    "command": "calva-fmt.alignCurrentForm",
    "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
  },
]
